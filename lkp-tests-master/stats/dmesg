#!/usr/bin/env ruby

# dmesg and kmsg both their strengths and limitations, so both are used.
#
# dmesg is only available for the KVM test boxes and the test boxes that
# have serial console output. Near half of the physical test boxes do
# not have serial console, hence do not have these dmesg files -- they
# only have RESULT_ROOT/kmsg which is the output of /proc/kmsg and
# collected inside the running kernel. dmesg is collected outside of the
# running kernel, so is more reliable when there are kernel oops. While
# kmsg is more accurate than the lossy/noisy serial console when there
# is no oops.
#
# So we use dmesg.* stats (which try to use dmesg then fall back to kmsg)
# to catch obvious kernel warning/bugs, while use kmsg.* stats (which is based
# on kmsg and falls back to dmesg) to catch 50000+ printk messages whose level
# is >= KERN_WARNING.

LKP_SRC = ENV['LKP_SRC'] || File.dirname(File.dirname(File.realpath($0)))
require "#{LKP_SRC}/lib/dmesg.rb"

if ENV['RESULT_ROOT']
	RESULT_ROOT = ENV['RESULT_ROOT']
	serial_file = "#{RESULT_ROOT}/dmesg"
	kmsg_file = "#{RESULT_ROOT}/kmsg"
	if File.exist? serial_file
		dmesg_file = serial_file

		if File.exist?(kmsg_file) and
		   File.size(serial_file) == 0 and
		   File.size(kmsg_file) > 0
			$stderr.puts "unexpected 0-sized serial file " + serial_file
			dmesg_file = kmsg_file
		end
	elsif File.exist? kmsg_file
		dmesg_file = kmsg_file
	else
		# disabled due to not applicable for "lkp run";
		# "last_state.booting" should be enough
		#
		# puts "early-boot-hang: 1"
		exit
	end

elsif ARGV[0]
	kmsg_file = ARGV[0]
	dmesg_file = ARGV[0]
else
	exit
end

if not File.exist?(dmesg_file) or File.size(dmesg_file) == 0
	# puts "early-boot-hang: 1"
	exit
end

dmesg_lines = fixup_dmesg_file(dmesg_file)

# check possibly misplaced serial log
def verify_serial_log(dmesg_lines)
	return unless $PROGRAM_NAME =~ /dmesg/
	return unless ENV['RESULT_ROOT']
	dmesg_lines.grep(/RESULT_ROOT=/) { |line|
		next if line =~ /^kexec -l | --initrd=| --append=|"$/
		next unless line =~ / RESULT_ROOT=([A-Za-z0-9.,;_\/+%:@=-]+) /
		rt = $1
		next unless Dir.exist? rt # serial console is often not reliable
		if rt != RESULT_ROOT
			$stderr.puts "RESULT_ROOT mismatch in dmesg: #{RESULT_ROOT} #{rt}"
		end
	}
end
verify_serial_log(dmesg_lines)

error_ids = {}
if $PROGRAM_NAME =~ /dmesg/
	output = grep_crash_head dmesg_file, '-o'
else
	output = grep_printk_errors kmsg_file, dmesg_file, dmesg_lines
end
exit if output.empty?
exit if output =~ /trinity.*: page allocation failure|Out of memory: .*trinity/ # trinity is known to trigger OOM

output.each_line { |line|
	line.chomp!

	next if line =~ /INFO: Stall ended before state dump start/
	next if line =~ /INFO: NMI handler .* took too long to run:/
	next if line =~ /Killed process \d+ \(/					# duplicated with "Out of memory: Kill process "

	# print_hex_dump
	next if line =~ /(\s[0-9a-f]{2}){16}/
	next if line =~ /(\s[0-9a-f]{4}){8}/
	next if line =~ /(\s[0-9a-f]{8}){4}/

	next if line =~ /[^\t\n\0[:print:]]/
	line.tr! "\0", ''

	error_id, bug_to_bisect = analyze_error_id line
	next if error_id.size <= 3

	error_ids[error_id] ||= bug_to_bisect
}

exit if error_ids.empty?

puts "boot_failures: 1" if $PROGRAM_NAME =~ /dmesg/

# This shows each error id only once
error_ids.each { |error_id, line|
	puts
	puts '# ' + line
	puts error_id
}
